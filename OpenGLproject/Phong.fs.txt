#version 330 core
out vec4 FragColor;

in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;  



// texture samplers
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform mat4 model;
uniform vec3 viewPos;
uniform int mode;

const vec3 lightColor = vec3(1.0);
const float ambientStrength = 0.1;
const float specularStrength = 1;
const float shininess = 32.0;

struct PointLight {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};

#define NR_POINT_LIGHTS 4  
uniform PointLight pointLights[NR_POINT_LIGHTS];

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir); 


void main()
{
	vec4 objectColor = mix(texture(texture1, TexCoord), texture(texture2, TexCoord), 0.5);
	
    // properties 
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

	vec3 result = vec3(0.0f);
    // phase 1: Point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);    
    // phase 2: Spot light
    //result += CalcSpotLight(spotLight, norm, FragPos, viewDir);    
    
	result = result * objectColor;
	FragColor = vec4(result, 1.0);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
	float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
		float spec = 0.0;
		if(mode == 1) {
			//this is blinn
			vec3 halfDir = normalize(lightDir + viewDir);
			spec = pow(max(dot(halfDir, normal), 0.0), shininess);
		}
		if(mode == 2){
			//this is phong
			vec3 reflectDir = reflect(-lightDir, normal);  
			spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess/4.0);
		}
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient * lightColor;
    vec3 diffuse  = light.diffuse  * diff * lightColor;
    vec3 specular = light.specular * spec * lightColor;
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 