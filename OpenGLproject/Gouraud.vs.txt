#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;
layout (location = 2) in vec3 aNormal;

out vec2 TexCoord;
out vec4 vColor;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 viewPos;
uniform int mode;

const vec3 lightColor = vec3(1.0);
const float shininess = 32.0;

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};
uniform SpotLight spotLight;

struct PointLight {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

		
    float constant;
    float linear;
    float quadratic;
};

#define NR_POINT_LIGHTS 4  
uniform PointLight pointLights[NR_POINT_LIGHTS];

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir); 
vec3 CalcSpotLight(SpotLight light,vec3 normal,vec3 fragPos,vec3 viewDir);

void main()
{	
	//set outs
	vec3 FragPos = vec3(model * vec4(aPos,1.0));
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
	gl_Position = projection * view * model * vec4(aPos, 1.0f);

    // properties
	vec3 Normal = mat3(transpose(inverse(model))) * aNormal;  
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

	vec3 result = vec3(0.0f);
    // phase 1: Point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);    
    // phase 2: Spot light
    result += CalcSpotLight(spotLight, norm, FragPos, viewDir);    
    
    vColor = vec4(result, 1.0);
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
	float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
		float spec = 0.0;
		if(mode == 1) {
			//this is blinn
			vec3 halfDir = normalize(lightDir + viewDir);
			spec = pow(max(dot(halfDir, normal), 0.0), shininess);
		}
		if(mode == 2){
			//this is phong
			vec3 reflectDir = reflect(-lightDir, normal);  
			spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess/4.0);
		}
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient * lightColor;
    vec3 diffuse  = light.diffuse  * diff * lightColor;
    vec3 specular = light.specular * spec * lightColor;
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 

vec3 CalcSpotLight(SpotLight light,vec3 normal,vec3 fragPos,vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);

    // ambient
    vec3 ambient = light.ambient * lightColor;
        
    // diffuse 
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * lightColor;  
        
    // specular shading
	float spec = 0.0;
	if(mode == 1) {
		//this is blinn
		vec3 halfDir = normalize(lightDir + viewDir);
		spec = pow(max(dot(halfDir, normal), 0.0), shininess);
	}
	if(mode == 2){
		//this is phong
		vec3 reflectDir = reflect(-lightDir, normal);  
		spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess/4.0);
	}
    vec3 specular = light.specular * spec * lightColor;   
        
	// spotlight (soft edges)
	float theta = dot(lightDir, normalize(-light.direction)); 
	float epsilon = (light.cutOff - light.outerCutOff);
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	diffuse  *= intensity;
	specular *= intensity;
    
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    

    // ambient  *= attenuation; // remove attenuation from ambient, as otherwise at large distances the light would be darker inside than outside the spotlight due the ambient term in the else branche
    diffuse   *= attenuation;
    specular *= attenuation;   
            
    vec3 result = ambient + diffuse + specular;
    return vec4(result, 1.0);


}